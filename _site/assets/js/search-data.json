{
  
    
        "post0": {
            "title": "Spring Roles for User/Admin",
            "content": "Lesson Materials . Our lesson uses backend code from this repository. If you want to follow along in this lesson, please git clone with the line below and run Main.java to use localhost: . git clone https://github.com/John-sCC/Roles_BE.git . The contents of this lesson are pretty important for projects! . Person and PersonRole Relationship . Person Object . (See Person.java) . The Person object is a POJO, which stands for “Plain Old Java Object.” Essentially, it’s a Java object with no special restrictions or requirements. It contains business logic and data for modeling entities. . Of the attributes of the object Person, one is roles, which is a Collection of PersonRole objects. These are the roles that we go over in this lesson. . // FULLY IMPLEMENTED! @ManyToMany(fetch = EAGER) private Collection&lt;PersonRole&gt; roles = new ArrayList&lt;&gt;(); . As a quick recap of SQL concepts: . @ManyToMany establishes that Person and PersonRole have a Many-to-Many relationship with each other (the same role can be assigned to many Person objects, and multiple Person object can be assigned to many roles). | fetch = EAGER establishes that, when a Person object is fetched, its roles should be fetched immediately at the same time. If it was instead fetch = LAZY, the PersonRole objects would only be fetched explicity, separate from the Person object. | . PersonRole Object . (See PersonRole.java) . The PersonRole object is another POJO with its own entities separate from the Person object. They are assigned to each other. In preparation for the lesson, we added an argument constructor and an initializer method. . public class PersonRole { @Id @GeneratedValue(strategy = GenerationType.AUTO) private Long id; @Column(unique=true) private String name; public PersonRole(String name) { this.name = name; } public static PersonRole[] init() { PersonRole student = new PersonRole(&quot;ROLE_STUDENT&quot;); PersonRole teacher = new PersonRole(&quot;ROLE_TEACHER&quot;); PersonRole admin = new PersonRole(&quot;ROLE_ADMIN&quot;); PersonRole[] initArray = {student, teacher, admin}; return initArray; } } . Initializing PersonRole . Now that we have an initializer for the PersonRole object, we add it to the ModelInit.java file as shown below. (Modified slightly to emphasize roles.) . public class ModelInit { // ...declarations... @Autowired PersonRoleJpaRepository roleRepo; @Bean CommandLineRunner run() { // runs when the application starts return args -&gt; { // ...jokes... // initializing person roles PersonRole[] personRoles = PersonRole.init(); for (PersonRole role : personRoles) { PersonRole existingRole = roleRepo.findByName(role.getName()); if (existingRole != null) { // role already exists continue; } else { // role doesn&#39;t exist roleRepo.save(role); } } // initializing person objects Person[] personArray = Person.init(); for (Person person : personArray) { //findByNameContainingIgnoreCaseOrEmailContainingIgnoreCase List&lt;Person&gt; personFound = personService.list(person.getName(), person.getEmail()); // lookup if (personFound.size() == 0) { personService.save(person); // save // ...notes... // adding the student role to each initial person personService.addRoleToPerson(person.getEmail(), &quot;ROLE_STUDENT&quot;); } } // for lesson demonstration: giving admin role to Mortensen personService.addRoleToPerson(personArray[4].getEmail(), &quot;ROLE_ADMIN&quot;); }; } } . The code is written so that, if the SQL database has been emptied, the roles will be recreated, but if it hasn’t been, they won’t be created a second time, which would cause an error (since the names would be repeats). . We gave one of the test Person objects, “John Mortensen,” the “ROLE_ADMIN” role. This will be used in conjunction with roles-based security. . Viewing Person and PersonRole in SQL . Now that the roles have been created and assigned, they can be viewed in the SQL table in two different ways that offer different information. . If you open the sqlite.db and look at the “person_role” (singular) table, you’ll see something like this: . . This shows each role and its corresponding ID. It works basically the same way as the “person” table. . . The second table has the title “person_roles” (plural). This type of table is called a “join table,” and it represents Many-to-Many relationships by showing the corresponding IDs of objects with relationships in pairs. . All Person objects other than the one with ID 5 only have a relationship to PersonRole ID 1, which is the “ROLE_STUDENT” role given when initialized. The Person with the ID 5 was given both “ROLE_STUDENT” and “ROLE_ADMIN,” so he has two different relationships shown. . Using Roles for Security . The first step to implementing security with roles is found in the file PersonDetailsService.java. The method below finds a user based on username, and then stores its roles as a Collection of SimpleGrantedAuthority based on the role names. All user details, including email, password and authorities are returned as “userdetails”. . /* UserDetailsService Overrides and maps Person &amp; Roles POJO into Spring Security */ @Override public org.springframework.security.core.userdetails.UserDetails loadUserByUsername(String email) throws UsernameNotFoundException { Person person = personJpaRepository.findByEmail(email); // setting variable user equal to the method finding the username in the database if(person==null) { throw new UsernameNotFoundException(&quot;User not found with username: &quot; + email); } Collection&lt;SimpleGrantedAuthority&gt; authorities = new ArrayList&lt;&gt;(); person.getRoles().forEach(role -&gt; { //loop through roles authorities.add(new SimpleGrantedAuthority(role.getName())); //create a SimpleGrantedAuthority by passed in role, adding it all to the authorities list, list of roles gets past in for spring security }); // train spring security to User and Authorities return new org.springframework.security.core.userdetails.User(person.getEmail(), person.getPassword(), authorities); } . Where is this method called? Why, when you make a /authenticate request, silly! . In JwtApiController.java, you can see it used when an authenticate request is called. The “userdetails” are used to create a JWT that is sent to the requester if the request is valid. . @PostMapping(&quot;/authenticate&quot;) public ResponseEntity&lt;?&gt; createAuthenticationToken(@RequestBody Person authenticationRequest) throws Exception { authenticate(authenticationRequest.getEmail(), authenticationRequest.getPassword()); final UserDetails userDetails = personDetailsService .loadUserByUsername(authenticationRequest.getEmail()); // HERE IT IS!! final String token = jwtTokenUtil.generateToken(userDetails); final ResponseCookie tokenCookie = ResponseCookie.from(&quot;jwt&quot;, token) .httpOnly(true) .secure(true) .path(&quot;/&quot;) .maxAge(3600) .sameSite(&quot;None; Secure&quot;) .build(); return ResponseEntity.ok().header(HttpHeaders.SET_COOKIE, tokenCookie.toString()).build(); } . Now that we have a cookie that tells us what the logged-in user’s roles are, we can use that as authority to make certain requests. In SecurityConfig.java, we added .hasAnyAuthority(&quot;ROLE_ADMIN&quot;) to the “mvc” and “api” update and delete requests. . public SecurityFilterChain filterChain(HttpSecurity http) throws Exception { http .csrf(csrf -&gt; csrf .disable() ) // list the requests/endpoints need to be authenticated .authorizeHttpRequests(auth -&gt; auth .requestMatchers(&quot;/authenticate&quot;).permitAll() .requestMatchers(&quot;/mvc/person/update/**&quot;, &quot;/mvc/person/delete/**&quot;).hasAnyAuthority(&quot;ROLE_ADMIN&quot;) // must be admin for these .requestMatchers(&quot;/api/person/post/**&quot;, &quot;/api/person/delete/**&quot;).hasAnyAuthority(&quot;ROLE_ADMIN&quot;) .requestMatchers(&quot;/**&quot;).permitAll() ) . As a result, only a signed-in user with Admin permissions will be able to make these requests successfully. Now, we will show it in action. . Frontend Application . MVC on Localhost . @GetMapping(&quot;/read&quot;) public String person(Model model) { List&lt;Person&gt; list = repository.listAll(); model.addAttribute(&quot;list&quot;, list); return &quot;person/read&quot;; } . When calling the /read endpoint the backend then returns a list of people stored in the person database. The line return&quot;person/read&quot; indicates to Spring that the page to be displayed is the read.html file. . For more examples of referencing, take a look at the PersonViewController.java file. . Login on Blog . &lt;div class=&quot;container bg-secondary py-4&quot;&gt; &lt;div class=&quot;p-5 mb-4 bg-light text-dark rounded-3&quot;&gt; &lt;h1&gt;Login&lt;/h1&gt; &lt;label for=&quot;email&quot;&gt;Username:&lt;/label&gt;&lt;br&gt; &lt;input type=&quot;text&quot; id=&quot;username&quot; name=&quot;username&quot;&gt;&lt;br&gt; &lt;label for=&quot;password&quot;&gt;Password:&lt;/label&gt;&lt;br&gt; &lt;input type=&quot;text&quot; id=&quot;password&quot; name=&quot;password&quot;&gt;&lt;br&gt;&lt;br&gt; &lt;input type=&quot;submit&quot; value=&quot;Login&quot; onclick=&quot;login()&quot;&gt; &lt;p id=&quot;message&quot;&gt;&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;script&gt; function login() { var email = document.getElementById(&#39;username&#39;).value; var password = document.getElementById(&#39;password&#39;).value; var data = {email:email, password:password}; fetch(&quot;/authenticate&quot;, {method: &#39;POST&#39;, headers: {&#39;Content-Type&#39;: &#39;application/json&#39;}, body: JSON.stringify(data)}).then((data) =&gt; { if (data.status == 200) { window.location.replace(&quot;/mvc/person/read&quot;); } else { document.getElementById(&#39;message&#39;).innerHTML = &quot;Invalid email or password&quot; } }); } &lt;/script&gt; . The login page calls the authenticate endpoint, and allows the user to log in and generate the JWT cookie that can be used to authenticate whether the user has the right to perform certain operations on the system (as defined in the SecurityConfig.java). . . Update . &lt;tr th:each=&quot;person : ${list}&quot;&gt; &lt;td th:text=&quot;${person.id}&quot;&gt;Person ID&lt;/td&gt; &lt;td th:text=&quot;${person.email}&quot;&gt;Birth Date&lt;/td&gt; &lt;td th:text=&quot;${person.name}&quot;&gt;Name&lt;/td&gt; &lt;td th:if=&quot;${person.getAge() != -1}&quot; th:text=&quot;${person.getAge()}&quot;&gt;Age&lt;/td&gt; &lt;td th:unless=&quot;${person.getAge() != -1}&quot; th:text=&quot;Unknown&quot;&gt;Unknown Age&lt;/td&gt; &lt;td&gt; &lt;! &lt;a th:href=&quot;@{/mvc/notes/{id}(id = ${person.id})}&quot;&gt;Notes&lt;/a&gt; --&gt; &lt;a th:href=&quot;@{/mvc/person/update/{id}(id = ${person.id})}&quot;&gt;Update&lt;/a&gt; &lt;a th:href=&quot;@{/mvc/person/delete/{id}(id = ${person.id})}&quot;&gt;Delete&lt;/a&gt; &lt;/td&gt; &lt;/tr&gt; . The thymeleaf here checks if, when the user presses on the Update or Delete tags, they have appropriate roles by calling the API. It gets the user ID for each user in the table and runs the restricted endpoints /update and /delete. If the user has the appropriate role (ROLE_ADMIN), then the user is allowed to continue the operation. Otherwise it throws the 403 error. . . Get a JWT . For a non-admin user, try: . Email: “toby@gmail.com” | Password: “123Toby!” | . For an admin user, try: . Email: “jm1021@gmail.com” | Password: “123Qwerty!” | . . Email: . . Password: . . Login . After clicking the “Login” button, make sure to check the console to ensure the fetch worked correctly! You’ll need to be running the localhost for the provided backend. . Anatomy of a JWT . The JWT token generated from the /authenticate endpont gives the server the cookie that determines the user’s role (it’s encrypted right now). . . You can customize JWT tokens while following certain structure. A token contains a Header, Payload, and Signature in the form header.payload.signature. You should be able to see this in the cookie you received after making the authenticate request! . *Note: the following paramters are not the same in the Spring library we use. That library is ResponseCookie, which has separate online documentation for the specific paramters. . Header . Includes the type of token and signing/encryption algorithm. Ex: . { &quot;alg&quot;: &quot;HS256&quot;, &quot;typ&quot;: &quot;JWT&quot; } . Payload . The payload contains the claims/description/customized properties of the token. They can be split into Registered Claims, Public Claims, and Custom Claims. . Registered . Predefined claims, basically mandatory for function. Include: . “iss” (Issuer) | “sub” (Subject) | “aud” (Audience) | “exp” (Expiration Time) | “iat” (Time the token was issued at) | . Public . Existing, predefined claims but optional. Include: . “name” | “family” | “email” | . Private . Custom claims such as “admin” . Signature . Created by the encoded header, used to verify the token is consistent and sent by the same person. Automatically generated when using the Spring library. . Helpful Website . If you visit this website and enter your encoded JWT, it will give you information about it. .",
            "url": "http://localhost:4000/jcc_frontend/2024/01/17/Roles_Lesson_IPYNB_2_.html",
            "relUrl": "/2024/01/17/Roles_Lesson_IPYNB_2_.html",
            "date": " • Jan 17, 2024"
        }
        
    
  
    
        ,"post1": {
            "title": "Teacher Survey Plans",
            "content": "Targets: . Statistics teachers usually open Jenkins, Edelstein | . | other math Hightwowerewrre | . | English Erin Persil | Boehm more like poem (english teacher reference) | Hall | . | Sciences Milledman | Campilllllllllo | Eckmannnn…. | Edwin Abraham | Jodi Roberts | liao | . | d39 teachers | gussich | velasco | Askegreen | Historical Fellows Simmons | Smith not the econ one | Smith the econ one | Elizabeth ayres | . | . Questions . are there any problems that you face in your role as a teacher? any inconveniences? | is there anything making class unnecessarily harder for your students? | edwin | What types of websites do you think students should be allowed to use in your class? | Do you have any programs that you think can be improved? | Have you ever wanted a website to exist but don’t know how to make it? with squarespace, | . Gusich: . Students cheating by opening up another window in a quiz | When you opened up a window for a quiz, you can’t open anything else or a notifcation is sent | Randomize questions | Mortensen: . Something that we can use to spread and teach computer science | csv files and python work well together | R jupyter language for math? | course with focus on computation with jupyter | portfolio for stem courses notebooks for each physics lab | . | school wants to build upon data science courses | . Ideas . Teacher resources page like Nighthawk Resources | “Yap translator,” audio transcriptions of lectures with ChatGPT assisted simplification of words | . ⠀⠀⠀⡔⠒⠖⣩⠿⢽⢿⠕⡀⠀⠀⠀⠀⠀⠀ ⠀⠀⢰⠀⠀⢂⠡⠼⠊⠁⠈⠉⠉⠁⠐⢢⡀⠀ ⠀⠀⠘⡤⠤⠂⠀⠀⠀⠀⠀⠀⠀⠀⣰⣿⣷⡄ ⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⣿⡏ ⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣻⠟⠀ ⠀⠀⠀⡔⠤⡀⠀⠀⠰⣶⠖⢰⠂⠀⠉⠀⠀⠀ ⠀⠀⡰⠉⠐⠠⠌⠉⠁⠠⡕⠺⡄⠀⠀⠀⠀⠀ ⠀⢰⠁⠀⠀⠀⠀⠀⠀⠸⠼⠀⢸⠀⠀⠀⠀⠀ ⠀⠘⡀⠀⠀⡆⠀⠀⠀⠀⠀⠀⠀⡆⠀⠀⠀⠀ ⠀⢸⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⢰⢰⠀⠀⠀⠀ ⠀⠘⡦⠔⠤⠃⠀⠀⠀⠀⠀⠀⡟⠁⠀⠀⠀⠀ ⢠⣔⣉⠆⠀⠀⠀⠀⢄⠀⠀⠀⣇⠀⠀⠀⠀⠀ ⠀⠀⠀⢰⠀⠀⠀⠀⢸⠆⠀⠀⢸⠀⠀⠀⠀⠀ ⠀⠀⠀⡆⠀⠀⠀⢀⠈⡢⠀⠀⢀⢕⠀⠀⠀⠀ ⠀⠀⠀⠑⠢⠄⣀⣀⣱⠸⠂⠀⠚⠉⠀⠀⠀⠀ .",
            "url": "http://localhost:4000/jcc_frontend/2023/12/18/teachersurvey.html",
            "relUrl": "/2023/12/18/teachersurvey.html",
            "date": " • Dec 18, 2023"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Us",
          "content": "The beginnings of a grand adventure… .",
          "url": "http://localhost:4000/jcc_frontend/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  

  
      ,"page4": {
          "title": "",
          "content": "Invert Idle Barking Walking",
          "url": "http://localhost:4000/jcc_frontend/navigation/game.html",
          "relUrl": "/navigation/game.html",
          "date": ""
      }
      
  

  
      ,"page5": {
          "title": "Image Recognition",
          "content": ". File Upload . Choose a File . Crop Image",
          "url": "http://localhost:4000/jcc_frontend/image-rec.html",
          "relUrl": "/image-rec.html",
          "date": ""
      }
      
  

  
      ,"page6": {
          "title": "Five Nights At Freddy's Roleplay",
          "content": "",
          "url": "http://localhost:4000/jcc_frontend/",
          "relUrl": "/",
          "date": ""
      }
      
  

  
  

  

  
  

  

  
      ,"page11": {
          "title": "Time Box",
          "content": "",
          "url": "http://localhost:4000/jcc_frontend/time/",
          "relUrl": "/time/",
          "date": ""
      }
      
  

  
  

  
  

}